{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Manish Meena\\\\Desktop\\\\01_react_piano\\\\src\\\\components\\\\Piano.js\";\nimport _ from 'lodash';\nimport React from 'react';\nimport './Piano.css';\nimport { Key } from './Key.js';\nimport { NOTES, VALID_KEYS, KEY_TO_NOTE } from '../global/constants';\n\nclass Piano extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.playNote = note => {\n      if (!_.isEmpty(note)) {\n        const noteAudio = new Audio(document.getElementById(note).src);\n        noteAudio.play();\n      }\n    };\n\n    this.handleKeyDown = event => {\n      if (event.repeat) {\n        return;\n      }\n\n      const key = event.key;\n      const updatedPressedKeys = [...this.state.pressedKeys];\n\n      if (!updatedPressedKeys.includes(key) && VALID_KEYS.includes(key)) {\n        updatedPressedKeys.push(key);\n      }\n\n      this.setState({\n        pressedKeys: updatedPressedKeys\n      });\n      this.playNote(KEY_TO_NOTE[key]);\n    };\n\n    this.handleKeyUp = event => {\n      const index = this.state.pressedKeys.indexOf(event.key);\n\n      if (index > -1) {\n        this.setState(state => ({\n          pressedKeys: state.pressedKeys.splice(index, 1)\n        }));\n      }\n    };\n\n    this.componentDidMount = () => {\n      window.addEventListener('keydown', this.handleKeyDown);\n      window.addEventListener('keyup', this.handleKeyUp);\n    };\n\n    this.state = {\n      pressedKeys: []\n    };\n  }\n\n  render() {\n    const keys = _.map(NOTES, (note, index) => {\n      return /*#__PURE__*/_jsxDEV(Key, {\n        note: note,\n        pressedKeys: this.state.pressedKeys\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this);\n    });\n\n    const audioFiles = _.map(NOTES, (note, index) => {\n      return /*#__PURE__*/_jsxDEV(\"audio\", {\n        id: note,\n        src: `../../notes/${note}.mp3`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this);\n    });\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"piano\",\n        children: keys\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: audioFiles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport { Piano };","map":{"version":3,"sources":["C:/Users/Manish Meena/Desktop/01_react_piano/src/components/Piano.js"],"names":["_","React","Key","NOTES","VALID_KEYS","KEY_TO_NOTE","Piano","Component","constructor","props","playNote","note","isEmpty","noteAudio","Audio","document","getElementById","src","play","handleKeyDown","event","repeat","key","updatedPressedKeys","state","pressedKeys","includes","push","setState","handleKeyUp","index","indexOf","splice","componentDidMount","window","addEventListener","render","keys","map","audioFiles"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport React from 'react';\n\nimport './Piano.css';\nimport { Key } from './Key.js'\nimport {\n  NOTES,\n  VALID_KEYS,\n  KEY_TO_NOTE,\n} from '../global/constants';\n\nclass Piano extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pressedKeys: [],\n    };\n  }\n\n  playNote = (note) => {\n    if (!_.isEmpty(note)) {\n      const noteAudio = new Audio(document.getElementById(note).src);\n      noteAudio.play();\n    }\n  }\n\n  handleKeyDown = (event) => {\n    if (event.repeat) {\n      return;\n    }\n    const key = event.key;\n    const updatedPressedKeys = [...this.state.pressedKeys];\n    if (!updatedPressedKeys.includes(key) && VALID_KEYS.includes(key)) {\n      updatedPressedKeys.push(key);\n    }\n    this.setState({\n      pressedKeys: updatedPressedKeys,\n    });\n    this.playNote(KEY_TO_NOTE[key]);\n  }\n\n  handleKeyUp = (event) => {\n    const index = this.state.pressedKeys.indexOf(event.key);\n    if (index > -1) {\n      this.setState(state => ({\n        pressedKeys: state.pressedKeys.splice(index, 1)\n      }));\n    }\n  }\n\n  componentDidMount = () => {\n    window.addEventListener('keydown', this.handleKeyDown);\n    window.addEventListener('keyup', this.handleKeyUp);\n  }\n\n  render() {\n    const keys = _.map(NOTES, (note, index) => {\n      return (\n        <Key\n          key={index}\n          note={note}\n          pressedKeys={this.state.pressedKeys}\n        />\n      );\n    });\n\n    const audioFiles = _.map(NOTES, (note, index) => {\n      return (\n        <audio\n          id={note}\n          key={index}\n          src={`../../notes/${note}.mp3`}\n        />\n      );\n    });\n\n    return (\n      <div>\n        <div className=\"piano\">\n          {keys}\n        </div>\n        <div>\n          {audioFiles}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport { Piano };\n"]},"metadata":{},"sourceType":"module"}